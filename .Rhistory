ggtitle("Improvement in Bench Press by Diet") + ## add title
xlab("Diet") + ## add x-axis label
ylab("Difference in bench press weight (final - inital)" ) + ## add y-axis label
theme_minimal()
View(max_min_times)
View(max_min_times)
View(bp_merged)
View(bp_merged)
View(bp_max)
View(bp_max)
View(bp_improvement)
max_min_times <- benchpress %>%
group_by(ID) %>%
summarise(min_time = min(time), max_time = max(time)) ## find the minimum and maximum time point for each individual using the summarise() function grouped by ID.
bp_merged <- inner_join(benchpress, max_min_times) ## merge the max and min times with the original data frame
bp_max <- bp_merged %>%
filter(time == max_time) %>%
select(ID, time, press, diet) ## filter data by max time and select relevant variables
bp_min <- bp_merged %>%
filter(time == min_time) %>%
select(ID, time, press, diet) ## filter data by min time and select relevant variables
bp_improvement <- bp_max %>%
mutate(bp_improve = bp_max$press - bp_min$press) %>%
select(ID, bp_improve, diet) ## calculate improvement of bench press weight by subtracting initial weight from final weight
bp_improvement %>%
ggplot(aes(x= as.factor(diet), y = bp_improve)) + ## call ggplot() set aes() x = diet, y = bench press weight improvement
geom_boxplot() + ## generate box plot
geom_jitter() + ## jitter points
ggtitle("Improvement in Bench Press by Diet") + ## add title
xlab("Diet") + ## add x-axis label
ylab("Difference in bench press weight (final - inital)" ) + ## add y-axis label
theme_minimal()
max_min_times <- benchpress %>%
group_by(ID) %>%
summarise(min_time = min(time), max_time = max(time)) ## find the minimum and maximum time point for each individual using the summarise() function grouped by ID.
bp_merged <- inner_join(benchpress, max_min_times) ## merge the max and min times with the original data frame
bp_max <- bp_merged %>%
filter(time == max_time) %>%
select(ID, time, press, diet) ## filter data by max time and select relevant variables
bp_min <- bp_merged %>%
filter(time == min_time) %>%
select(ID, time, press, diet) ## filter data by min time and select relevant variables
bp_improvement <- bp_max %>%
mutate(bp_improve = bp_max$press - bp_min$press) %>%
select(ID, bp_improve, diet) ## calculate improvement of bench press weight by subtracting initial weight from final weight
bp_improvement %>%
ggplot(aes(x= as.factor(diet), y = bp_improve)) + ## call ggplot() set aes() x = diet, y = bench press weight improvement
geom_boxplot() + ## generate box plot
geom_jitter() + ## jitter points
ggtitle("Improvement in Bench Press by Diet") + ## add title
xlab("Diet") + ## add x-axis label
ylab("Difference in bench press weight (final - inital)" ) + ## add y-axis label
theme_minimal()
max_min_times <- benchpress %>%
group_by(ID) %>%
summarise(min_time = min(time), max_time = max(time)) ## find the minimum and maximum time point for each individual using the summarise() function grouped by ID.
bp_merged <- inner_join(benchpress, max_min_times) ## merge the max and min times with the original data frame
bp_max <- bp_merged %>%
filter(time == max_time) %>%
select(ID, time, press, diet) ## filter data by max time and select relevant variables
bp_min <- bp_merged %>%
filter(time == min_time) %>%
select(ID, time, press, diet) ## filter data by min time and select relevant variables
bp_improvement <- bp_max %>%
mutate(bp_improve = bp_max$press - bp_min$press) %>%
select(ID, bp_improve, diet) ## calculate improvement of bench press weight by subtracting initial weight from final weight
bp_improvement %>%
ggplot(aes(x= as.factor(diet), y = bp_improve)) + ## call ggplot() set aes() x = diet, y = bench press weight improvement
geom_boxplot() + ## generate box plot
geom_jitter() + ## jitter points
ggtitle("Improvement in Bench Press by Diet") + ## add title
xlab("Diet") + ## add x-axis label
ylab("Difference in bench press weight (final - inital)" ) + ## add y-axis label
theme_minimal()
times_o_interest <- benchpress %>%
group_by(ID) %>% ## group by ID since we are interested in finding discrete time points for each individual
summarise(min_time = min(time), max_time = max(time), time_150 = time[which.min(abs(time - 150))]) ## use summarise() to find the min and max time point for each individual along with the time point closest to 150.
merged_data <- inner_join(benchpress, times_o_interest) ## merge time points with the original data frame
time_min <- merged_data %>%
filter(time == min_time) %>%
select(ID, time, press, diet) ## filter data by min time and select relevant variables
time_150 <- merged_data %>%
filter(time == time_150) %>% ## filter data by the 150 time point or closest time point to 150
mutate(time = rep(150, length(time))) %>%  ## set all time point labels to "150" to make plotting cleaner
select(ID, time, press, diet) ## select relevant variables
time_max <- merged_data %>%
filter(time == max_time) %>% ## filter data by max time
mutate(time = rep(300, length(time))) %>% ## set all time point labels to "300" to make plotting cleaner
select(ID, time, press, diet) ## select relevant variables
plot_tib <- bind_rows(time_min, time_150, time_max) ## combine time point variables into a single data frame
sum_tib <- plot_tib %>%
group_by(time,diet) %>%
summarize(avg_press = mean(press), SEM_press = sd(press)/sqrt(n())) ## calculate summary statistics (mean and standard error of the mean (SEM))
# ggplot() +
#   geom_point(data = plot_tib, aes(x = as.factor(time), y= press, color = as.factor(diet))) +
#   geom_point(data = sum_tib, aes(x = as.factor(time), y= avg_press, fill = as.factor(diet)), size = 3, colour = "black", pch=21) +
#   geom_line(data = sum_tib, aes(x = as.factor(time), y= avg_press, group = diet, color = as.factor(diet))) +
#   geom_errorbar(data = sum_tib, aes(x = as.factor(time), y= avg_press, ymin = avg_press - SEM_press, ymax = avg_press + SEM_press, color = as.factor(diet)), width = 0.2) +
#   scale_color_discrete(name = "Diet", labels=c('No diet', 'Diet')) +
#   ggtitle("Bench press weight over time") +
#   xlab("Time (days)") +
#   ylab("Weight (lbs)")
ggplot(data = sum_tib, aes(x = as.factor(time), y= avg_press, group = diet, color = as.factor(diet))) + ## call ggplot and set aes()
geom_point(size = 2) + ## mark means with scatter points
geom_line() + ## connect points with line
geom_errorbar(aes(ymin = avg_press - SEM_press, ymax = avg_press + SEM_press), width = 0.2) + ## add error bars with SEM
scale_color_discrete(name = "Diet", labels=c('No diet', 'Diet')) + ## all legend name and change "0", and "1" to 'No diet', 'Diet' in legend
ggtitle("Bench press weight over time") + ## add title
xlab("Time (days)") + ## add x-axis label
ylab("Weight (lbs)") ## add y-axis label
View(times_o_interest)
View(times_o_interest)
?which.min
View(time_150)
View(time_150)
View(plot_tib)
View(plot_tib)
times_o_interest <- benchpress %>%
group_by(ID) %>% ## group by ID since we are interested in finding discrete time points for each individual
summarise(min_time = min(time), max_time = max(time), time_150 = time[which.min(abs(time - 150))]) ## use summarise() to find the min and max time point for each individual along with the time point closest to 150.
merged_data <- inner_join(benchpress, times_o_interest) ## merge time points with the original data frame
time_min <- merged_data %>%
filter(time == min_time) %>%
select(ID, time, press, diet) ## filter data by min time and select relevant variables
time_150 <- merged_data %>%
filter(time == time_150) %>% ## filter data by the 150 time point or closest time point to 150
mutate(time = rep(150, length(time))) %>%  ## set all time point labels to "150" to make plotting cleaner
select(ID, time, press, diet) ## select relevant variables
time_max <- merged_data %>%
filter(time == max_time) %>% ## filter data by max time
mutate(time = rep(300, length(time))) %>% ## set all time point labels to "300" to make plotting cleaner
select(ID, time, press, diet) ## select relevant variables
plot_tib <- bind_rows(time_min, time_150, time_max) ## combine time point variables into a single data frame
sum_tib <- plot_tib %>%
group_by(time,diet) %>%
summarize(avg_press = mean(press), SEM_press = sd(press)/sqrt(n())) ## calculate summary statistics (mean and standard error of the mean (SEM))
# ggplot() +
#   geom_point(data = plot_tib, aes(x = as.factor(time), y= press, color = as.factor(diet))) +
#   geom_point(data = sum_tib, aes(x = as.factor(time), y= avg_press, fill = as.factor(diet)), size = 3, colour = "black", pch=21) +
#   geom_line(data = sum_tib, aes(x = as.factor(time), y= avg_press, group = diet, color = as.factor(diet))) +
#   geom_errorbar(data = sum_tib, aes(x = as.factor(time), y= avg_press, ymin = avg_press - SEM_press, ymax = avg_press + SEM_press, color = as.factor(diet)), width = 0.2) +
#   scale_color_discrete(name = "Diet", labels=c('No diet', 'Diet')) +
#   ggtitle("Bench press weight over time") +
#   xlab("Time (days)") +
#   ylab("Weight (lbs)")
ggplot(data = sum_tib, aes(x = as.factor(time), y= avg_press, group = diet, color = as.factor(diet))) + ## call ggplot and set aes()
geom_point(size = 2) + ## mark means with scatter points
geom_line() + ## connect points with line
geom_errorbar(aes(ymin = avg_press - SEM_press, ymax = avg_press + SEM_press), width = 0.2) + ## add error bars with SEM
scale_color_discrete(name = "Diet", labels=c('No diet', 'Diet')) + ## all legend name and change "0", and "1" to 'No diet', 'Diet' in legend
ggtitle("Bench press weight over time") + ## add title
xlab("Time (days)") + ## add x-axis label
ylab("Weight (lbs)") ## add y-axis label
knitr::opts_chunk$set(echo = TRUE)
## you may put all R packages here.
suppressWarnings(suppressMessages(library(tidyverse)))
library(tidyverse)
library(knitr)
setwd("C:/Users/ebene/OneDrive - University of Florida/PHC6099_programming_basics/r_scripts")
benchpress <- read_csv("benchPress.csv")
head(benchpress)
weightbl <- benchpress %>%
filter(time == 0) ## get baseline data points by filtering time == 0
ggplot(data= weightbl, aes(x= weight)) + ## identify data set and x values in ggplot call
geom_histogram(aes(y= after_stat(density)), position = "identity") + ## call geom_histogram() to provide a histogram and set y= after_stat(density)
geom_density(col = "red") + ## use geom_density() to draw the density function on top of the histogram
facet_grid(pre~diet) + ## facet_grid() to get 4 figures panels showing combinations of "pre" and "diet"
ggtitle("Weight of all participants at baseline") + ## add title
xlab("Weight") + ## add x-axis label
ylab("Density") + ## y-axis label
theme_bw()
string_time <- unlist(benchpress %>%
select(time) %>% ## select only the time column from the dataset
gsub(pattern= "[1|3|5|7|9]", replacement= "O") %>% ## use gsub() to replace odd values with "O"
gsub(pattern= "[2|4|6|8|0]", replacement= "E") %>% ## use gsub() to replace even values with "E"
strsplit(split = " ")) ## split the strings at spaces
num_of_E <- str_count(string_time, "E") ## count how many "E" each values contains
num_of_O <- str_count(string_time, "O") ## count how many "O" each values contains
instances_with_more_E <- sum(num_of_E > num_of_O) ## count how many more instances of "E" there are compared with "O"
cat("Number of instances with more 'E' than 'O':", instances_with_more_E)  ## print result
benchpress %>% ggplot(aes(x= time, y= press, group = ID, col= as.factor(ID))) + ## feed data frame into ggplot and set aes() variables
geom_line() + ## call geom_line(); since we set the group and col aesthetics to ID we get 50 lines per sub figures of different colors representing individual trajectory of the bench pressed weights for each group
facet_grid(~diet) + ## create two sub figures separated by diet
theme(legend.position = 'none') + ## remove legend
ggtitle("Individual trajectory of the bench pressed weight over time by diet group") + ## add title
xlab("Time (days)") + ## add x-axis label
ylab("Brench press weight (lbs)") ## y-axis label
benchpress %>% ggplot(aes(x= time, y= press, group = ID, col= as.factor(ID))) + ## feed data frame into ggplot and set aes() variables
geom_line() + ## call geom_line(); since we set the group and col aesthetics to ID we get 50 lines per sub figures of different colors representing individual trajectory of the bench pressed weights for each group
facet_grid(~diet) + ## create two sub figures separated by diet
theme(legend.position = 'none') + ## remove legend
ggtitle("Individual trajectory of the bench pressed weight over time by diet group") + ## add title
xlab("Time (days)") + ## add x-axis label
ylab("Brench press weight (lbs)") ## y-axis label
weightbl <- benchpress %>%
filter(time == 0) ## get baseline data points by filtering time == 0
ggplot(data= weightbl, aes(x= weight)) + ## identify data set and x values in ggplot call
geom_histogram(aes(y= after_stat(density)), position = "identity") + ## call geom_histogram() to provide a histogram and set y= after_stat(density)
geom_density(col = "red") + ## use geom_density() to draw the density function on top of the histogram
facet_grid(pre~diet) + ## facet_grid() to get 4 figures panels showing combinations of "pre" and "diet"
ggtitle("Weight of all participants at baseline") + ## add title
xlab("Weight") + ## add x-axis label
ylab("Density") + ## y-axis label
theme_bw()
weightbl <- benchpress %>%
filter(time == 0) ## get baseline data points by filtering time == 0
# New facet label names for dose variable
pre.labs <- c("No previous lifting experience", "Previous lifting experience")
names(pre.labs) <- c(0,1)
# New facet label names for supp variable
diet.labs <- c("Not in diet program", "In diet program")
names(diet.labs) <- c(0,1)
ggplot(data= weightbl, aes(x= weight)) + ## identify data set and x values in ggplot call
geom_histogram(aes(y= after_stat(density)), position = "identity") + ## call geom_histogram() to provide a histogram and set y= after_stat(density)
geom_density(col = "red") + ## use geom_density() to draw the density function on top of the histogram
facet_grid(pre~diet, labeller = labeller(pre = pre.labs, diet = diet.labs)) + ## facet_grid() to get 4 figures panels showing combinations of "pre" and "diet"
ggtitle("Weight of all participants at baseline") + ## add title
xlab("Weight") + ## add x-axis label
ylab("Density") + ## y-axis label
theme_bw()
# New facet label names for diet variable
diet.labs <- c("Not in diet program", "In diet program")
names(diet.labs) <- c(0,1)
benchpress %>% ggplot(aes(x= time, y= press, group = ID, col= as.factor(ID))) + ## feed data frame into ggplot and set aes() variables
geom_line() + ## call geom_line(); since we set the group and col aesthetics to ID we get 50 lines per sub figures of different colors representing individual trajectory of the bench pressed weights for each group
facet_grid(~diet, labeller = labeller(diet = diet.labs)) + ## create two sub figures separated by diet
theme(legend.position = 'none') + ## remove legend
ggtitle("Individual trajectory of the bench pressed weight over time by diet group") + ## add title
xlab("Time (days)") + ## add x-axis label
ylab("Brench press weight (lbs)") ## y-axis label
max_min_times <- benchpress %>%
group_by(ID) %>%
summarise(min_time = min(time), max_time = max(time)) ## find the minimum and maximum time point for each individual using the summarise() function grouped by ID.
bp_merged <- inner_join(benchpress, max_min_times) ## merge the max and min times with the original data frame
bp_max <- bp_merged %>%
filter(time == max_time) %>%
select(ID, time, press, diet) ## filter data by max time and select relevant variables
bp_min <- bp_merged %>%
filter(time == min_time) %>%
select(ID, time, press, diet) ## filter data by min time and select relevant variables
bp_improvement <- bp_max %>%
mutate(bp_improve = bp_max$press - bp_min$press) %>%
select(ID, bp_improve, diet) ## calculate improvement of bench press weight by subtracting initial weight from final weight
bp_improvement %>%
ggplot(aes(x= as.factor(diet), y = bp_improve)) + ## call ggplot() set aes() x = diet, y = bench press weight improvement
geom_boxplot() + ## generate box plot
geom_jitter() + ## jitter points
ggtitle("Improvement in Bench Press by Diet") + ## add title
xlab("Diet") + ## add x-axis label
ylab("Difference in bench press weight (final - inital)" ) + ## add y-axis label
theme_minimal()
max_min_times <- benchpress %>%
group_by(ID) %>%
summarise(min_time = min(time), max_time = max(time)) ## find the minimum and maximum time point for each individual using the summarise() function grouped by ID.
bp_merged <- inner_join(benchpress, max_min_times) ## merge the max and min times with the original data frame
bp_max <- bp_merged %>%
filter(time == max_time) %>%
select(ID, time, press, diet) ## filter data by max time and select relevant variables
bp_min <- bp_merged %>%
filter(time == min_time) %>%
select(ID, time, press, diet) ## filter data by min time and select relevant variables
bp_improvement <- bp_max %>%
mutate(bp_improve = bp_max$press - bp_min$press) %>%
select(ID, bp_improve, diet) ## calculate improvement of bench press weight by subtracting initial weight from final weight
bp_improvement %>%
ggplot(aes(x= as.factor(diet), y = bp_improve)) + ## call ggplot() set aes() x = diet, y = bench press weight improvement
geom_boxplot() + ## generate box plot
geom_jitter() + ## jitter points
scale_x_discrete(labels=c('Not in diet program', 'In diet program')) +
ggtitle("Improvement in Bench Press by Diet") + ## add title
xlab("Diet") + ## add x-axis label
ylab("Difference in bench press weight (final - inital)" ) + ## add y-axis label
theme_minimal()
times_o_interest <- benchpress %>%
group_by(ID) %>% ## group by ID since we are interested in finding discrete time points for each individual
summarise(min_time = min(time), max_time = max(time), time_150 = time[which.min(abs(time - 150))]) ## use summarise() to find the min and max time point for each individual along with the time point closest to 150.
merged_data <- inner_join(benchpress, times_o_interest) ## merge time points with the original data frame
time_min <- merged_data %>%
filter(time == min_time) %>%
select(ID, time, press, diet) ## filter data by min time and select relevant variables
time_150 <- merged_data %>%
filter(time == time_150) %>% ## filter data by the 150 time point or closest time point to 150
mutate(time = rep(150, length(time))) %>%  ## set all time point labels to "150" to make plotting cleaner
select(ID, time, press, diet) ## select relevant variables
time_max <- merged_data %>%
filter(time == max_time) %>% ## filter data by max time
mutate(time = rep(300, length(time))) %>% ## set all time point labels to "300" to make plotting cleaner
select(ID, time, press, diet) ## select relevant variables
plot_tib <- bind_rows(time_min, time_150, time_max) ## combine time point variables into a single data frame
sum_tib <- plot_tib %>%
group_by(time,diet) %>%
summarize(avg_press = mean(press), SEM_press = sd(press)/sqrt(n())) ## calculate summary statistics (mean and standard error of the mean (SEM))
# ggplot() +
#   geom_point(data = plot_tib, aes(x = as.factor(time), y= press, color = as.factor(diet))) +
#   geom_point(data = sum_tib, aes(x = as.factor(time), y= avg_press, fill = as.factor(diet)), size = 3, colour = "black", pch=21) +
#   geom_line(data = sum_tib, aes(x = as.factor(time), y= avg_press, group = diet, color = as.factor(diet))) +
#   geom_errorbar(data = sum_tib, aes(x = as.factor(time), y= avg_press, ymin = avg_press - SEM_press, ymax = avg_press + SEM_press, color = as.factor(diet)), width = 0.2) +
#   scale_color_discrete(name = "Diet", labels=c('No diet', 'Diet')) +
#   ggtitle("Bench press weight over time") +
#   xlab("Time (days)") +
#   ylab("Weight (lbs)")
ggplot(data = sum_tib, aes(x = as.factor(time), y= avg_press, group = diet, color = as.factor(diet))) + ## call ggplot and set aes()
geom_point(size = 2) + ## mark means with scatter points
geom_line() + ## connect points with line
geom_errorbar(aes(ymin = avg_press - SEM_press, ymax = avg_press + SEM_press), width = 0.2) + ## add error bars with SEM
scale_color_discrete(name = "Diet", labels=c('No diet', 'Diet')) + ## all legend name and change "0", and "1" to 'No diet', 'Diet' in legend
ggtitle("Bench press weight over time") + ## add title
xlab("Time (days)") + ## add x-axis label
ylab("Weight (lbs)") ## add y-axis label
## this function sum_stat() takes a vector as an input. It outputs a list of the max, min, and IQR of the vector. If there are any negative values in the vector it still provides the expected output but warns the user that the vector contains a negative value.
sum_stat <- function(x){
if(any(x < 0)) { ## if/elseif statements to determine if there are any negative values in the vector. The any() function returns TRUE if any of the values in a vector meet the specified condition (i.e., x<0).
warning("input vector contains negative values") ## the warning function provides a warning message within functions. Here I used to it warn users when they have input a negative value(s).
m <- max(x) ## calculate max
mi <- min(x) ## calculate min
i <- IQR(x) ## calculate IQR
result <- list(Max = m,
Min = mi,
IQR = i) ## package results into list
} else if (all(x >= 0)){ ## if all values of the vector are positive we run the same calculations but do not provide a warning message
m <- max(x) ## calculate max
mi <- min(x) ## calculate min
i <- IQR(x) ## calculate IQR
result <- list(Max = m,
Min = mi,
IQR = i)  ## package results into list
}
return(result)
}
baseline_weight <- as.vector(unlist(benchpress %>% ## convert to numeric vector data type
filter(time == 0 ) %>% ## filter() time = 0 which represent baseline
select(weight))) ## select only the weight variable since that what we are interested in
sum_stat(baseline_weight)
library(tidyverse)
library(knitr)
setwd("C:/Users/ebene/OneDrive - University of Florida/PHC6099_programming_basics/r_scripts")
benchpress <- read_csv("benchPress.csv")
head(benchpress)
sum_output <- benchpress %>%
group_by(diet) %>% ## group by diet to get summarise() to provide results grouped by diet
summarise('N'= sprintf("%d",n()), ## use n() to calculate counts for each diet group, sprintf() helps format for output table
'Age (years)' = sprintf("%.1f (%.1f)", mean(age), sd(age)), ## calculate mean and sd for age, use sprintf() to format correctly
'Previous experience == 1, n (%)' = sprintf("%.1f (%.1f%%)",sum(pre == 1), (sum(pre == 1) / n()) * 100)) ## use sum() to calculate how many individuals have previous lifting experience. Calculate percentages by dividing sum(pre == 1) by total n for each group and multiplying by 100. Use sprintf() to format for table.
dem_table <- sum_output %>%
pivot_longer(c('N', 'Age (years)', 'Previous experience == 1, n (%)' ), names_to = "Type", values_to = 'temp') %>%
pivot_wider(names_from = diet, values_from = temp) ## use pivot_longer() to move 'N', 'Age (years)', 'Previous experience == 1, n (%)' to rows and values to a new column called "temp". Then use pivot_wider() to move the values of the "diet" column to column names.
colnames(dem_table) <- c('Type', 'diet==0', 'diet==1') ## change column names to exactly match example table
kable(dem_table) ## generate final output table
sorted_data <- benchpress %>%
arrange(age, desc(ID), desc(time)) ## Sort data by age (ascending), ID (descending) and time (descending)
temp_txt <- head(sorted_data$press, n= 5L) ## grab first 5 values of bench press weight
cat("first five instances of the amount of bench press = ", temp_txt, "\n") ## print values
weightbl <- benchpress %>%
filter(time == 0) ## get baseline data points by filtering time == 0
# New facet label names for pre variable
pre.labs <- c("No previous lifting experience", "Previous lifting experience")
names(pre.labs) <- c(0,1)
# New facet label names for diet variable
diet.labs <- c("Not in diet program", "In diet program")
names(diet.labs) <- c(0,1)
ggplot(data= weightbl, aes(x= weight)) + ## identify data set and x values in ggplot call
geom_histogram(aes(y= after_stat(density)), position = "identity") + ## call geom_histogram() to provide a histogram and set y= after_stat(density)
geom_density(col = "red") + ## use geom_density() to draw the density function on top of the histogram
facet_grid(pre~diet, labeller = labeller(pre = pre.labs, diet = diet.labs)) + ## facet_grid() to get 4 figures panels showing combinations of "pre" and "diet"
ggtitle("Weight of all participants at baseline") + ## add title
xlab("Weight") + ## add x-axis label
ylab("Density") + ## y-axis label
theme_bw()
string_time <- unlist(benchpress %>%
select(time) %>% ## select only the time column from the data set
gsub(pattern= "[1|3|5|7|9]", replacement= "O") %>% ## use gsub() to replace odd values with "O"
gsub(pattern= "[2|4|6|8|0]", replacement= "E") %>% ## use gsub() to replace even values with "E"
strsplit(split = " ")) ## split the strings at spaces
num_of_E <- str_count(string_time, "E") ## count how many "E" each values contains
num_of_O <- str_count(string_time, "O") ## count how many "O" each values contains
instances_with_more_E <- sum(num_of_E > num_of_O) ## count how many more instances of "E" there are compared with "O"
cat("Number of instances with more 'E' than 'O':", instances_with_more_E)  ## print result
# New facet label names for diet variable
diet.labs <- c("Not in diet program", "In diet program")
names(diet.labs) <- c(0,1)
benchpress %>% ggplot(aes(x= time, y= press, group = ID, col= as.factor(ID))) + ## feed data frame into ggplot and set aes() variables
geom_line() + ## call geom_line(); since we set the group and col aesthetics to ID we get 50 lines per sub figures of different colors representing individual trajectory of the bench pressed weights for each group
facet_grid(~diet, labeller = labeller(diet = diet.labs)) + ## create two sub figures separated by diet
theme(legend.position = 'none') + ## remove legend
ggtitle("Individual trajectory of the bench pressed weight over time by diet group") + ## add title
xlab("Time (days)") + ## add x-axis label
ylab("Brench press weight (lbs)") ## y-axis label
knitr::opts_chunk$set(echo = TRUE)
## set working directory to be Desktop
WD <- 'C:/Users/ebene/Desktop'
setwd(WD)
usethis::create_package("EMGhelpeR", open = FALSE) ## open = FALSE will prevent R open a new R studio session.
WD2 <- 'C:/Users/ebene/Desktop/EMGhelpeR'
setwd(WD2)
setwd(WD2)
WD2 <- 'C:/Users/ebene/OneDrive - University of Florida/PHC6099_programming_basics/final_project/EMGhelpeR'
setwd(WD2)
devtools::document()
## set working directory to be Desktop
WD <- 'C:/Users/ebene/Desktop'
setwd(WD)
knitr::opts_chunk$set(echo = TRUE)
formatR::tidy_dir("R")
library(formatR)
install.packages('formatR')
library(formatR)
formatR::tidy_dir("R")
?formatR::tidy_dir
formatR::tidy_dir("C:/Users/ebene/OneDrive - University of Florida/PHC6099_programming_basics/final_project/EMGhelpeR/R")
devtools::document()
devtools::document(pkg = "C:/Users/ebene/OneDrive - University of Florida/PHC6099_programming_basics/final_project/EMGhelpeR")
usethis::use_rcpp()
usethis::use_rcpp(pkg = "C:/Users/ebene/OneDrive - University of Florida/PHC6099_programming_basics/final_project/EMGhelpeR")
WD2 <- 'C:/Users/ebene/OneDrive - University of Florida/PHC6099_programming_basics/final_project/EMGhelpeR'
setwd(WD2)
usethis::use_rcpp()
WD2 <- 'C:/Users/ebene/OneDrive - University of Florida/PHC6099_programming_basics/final_project/EMGhelpeR'
setwd(WD2)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = "C:/Users/ebene/OneDrive - University of Florida/PHC6099_programming_basics/final_project/EMGhelpeR")
usethis::use_rcpp()
library(Rcpp)
Rcpp::compileAttributes()
Rcpp::compileAttributes()
?abs
devtools::build()
devtools::install()
?EMGhelpR
library(EMGhelpR)
library(EMGhelpeR)
vignette('EMGhelpeR')
vignette(package = "EMGhelpeR")
library(EMGhelpeR)
ls("package::EMGhelpeR")
getNamespaceExports(EMGhelpeR)
getNamespaceExports("EMGhelpeR")
?moving_RMS
system("R CMD check "C:/Users/ebene/OneDrive - University of Florida/PHC6099_programming_basics/final_project/EMGhelpeR_0.0.1.tar.gz"")
system("R CMD check C:/Users/ebene/OneDrive - University of Florida/PHC6099_programming_basics/final_project/EMGhelpeR_0.0.1.tar.gz")
system("R CMD check C:/Users/ebene/Desktop/EMGhelpeR_0.0.1.tar.gz")
system("R CMD check C:\Users\ebene\Desktop\EMGhelpeR_0.0.1.tar.gz")
system("R CMD check C:/Users/ebene/Desktop/EMGhelpeR_0.0.1.tar.gz")
install.packages("devtools")
devtools::install_github("r-lib/roxygen2")
install.packages("devtools")
formatR::tidy_dir("C:/Users/ebene/OneDrive - University of Florida/PHC6099_programming_basics/final_project/EMGhelpeR/R")
devtools::document(pkg = "C:/Users/ebene/OneDrive - University of Florida/PHC6099_programming_basics/final_project/EMGhelpeR")
system("R CMD check C:/Users/ebene/Desktop/EMGhelpeR_0.0.1.tar.gz")
system(R CMD check "C:/Users/ebene/OneDrive - University of Florida/PHC6099_programming_basics/final_project/EMGhelpeR_0.0.1.tar.gz")
system("R CMD check C:/Users/ebene/OneDrive - University of Florida/PHC6099_programming_basics/final_project/EMGhelpeR_0.0.1.tar.gz")
system("R CMD check C:/Users/ebene/OneDrive - University of Florida/PHC6099_programming_basics/final_project/EMGhelpeR")
system("R CMD check C:\Users\ebene\Desktop\EMGhelpeR_0.0.1.tar.gz")
system("R CMD check C:/Users/ebene/Desktop/EMGhelpeR_0.0.1.tar.gz")
tinytex::latexmk(file = "C:/Users/ebene/OneDrive - University of Florida/PHC6099_programming_basics/final_project/EMGhelpeR/EMGhelpeR.Rcheck/EMGhelpeR-manual.tex")
tinytex::latexmk(file = "C:/Users/ebene/OneDrive - University of Florida/PHC6099_programming_basics/final_project/EMGhelpeR/EMGhelpeR.Rcheck/EMGhelpeR-manual.tex")
devtools::check(pkg = "C:/Users/ebene/OneDrive - University of Florida/PHC6099_programming_basics/final_project/EMGhelpeR")
install.packages("rcmdcheck")
install.packages("rcmdcheck")
rcmdcheck("C:/Users/ebene/OneDrive - University of Florida/PHC6099_programming_basics/final_project/EMGhelpeR")
library(rcmdcheck)
rcmdcheck("C:/Users/ebene/OneDrive - University of Florida/PHC6099_programming_basics/final_project/EMGhelpeR")
system(rm -Rf C:/Users/ebene/AppData/Local/Temp/RtmpWIAMzT/Rd2pdf43944a0481b)
system("rm -Rf C:/Users/ebene/AppData/Local/Temp/RtmpWIAMzT/Rd2pdf43944a0481b")
system("R CMD check C:/Users/ebene/Desktop/EMGhelpeR_0.0.1.tar.gz")
system("R CMD check C:/Users/ebene/Desktop/EMGhelpeR_0.0.1.tar.gz")
devtools::check(pkg = "C:/Users/ebene/OneDrive - University of Florida/PHC6099_programming_basics/final_project/EMGhelpeR")
system("R CMD check C:/Users/ebene/Desktop/EMGhelpeR_0.0.1.tar.gz")
knitr::opts_chunk$set(echo = TRUE)
\dontrun{
filt_butter <- autofilt(
input_data=EMG_data,
filter_type='butter',
fs=5000, order=2,
ftype='pass',
high_cut=1000,
low_cut=100,
preview_plot = FALSE
)
library(EMGhelpeR)
filt_butter <- autofilt(
input_data=EMG_data,
filter_type='butter',
fs=5000, order=2,
ftype='pass',
high_cut=1000,
low_cut=100,
preview_plot = FALSE
)
knitr::opts_chunk$set(echo = TRUE)
library(EMGhelpeR)
data("EMG_data")
peak_out <- peakfinder(
input_data= EMG_data,
threshold = 0.1,
min_distance = 2500,
preview_plot = FALSE
)
system("R CMD check C:\Users\ebene\Desktop\EMGhelpeR_0.0.1.tar.gz")
system("R CMD check C:/Users/ebene/Desktop/EMGhelpeR_0.0.1.tar.gz")
nstall.packages(file.path(""C:/Users/ebene/Desktop/"","EMGhelpeR_0.0.1.tar.gz"),repos=NULL,type="source")
install.packages(file.path("C:/Users/ebene/Desktop/","EMGhelpeR_0.0.1.tar.gz"),repos=NULL,type="source")
system("R CMD check C:/Users/ebene/Desktop/EMGhelpeR_0.0.1.tar.gz")
system("R CMD check C:/Users/ebene/Desktop/EMGhelpeR_0.0.1.tar.gz")
formatR::tidy_dir("C:/Users/ebene/OneDrive - University of Florida/PHC6099_programming_basics/final_project/EMGhelpeR/R")
devtools::document(pkg = "C:/Users/ebene/OneDrive - University of Florida/PHC6099_programming_basics/final_project/EMGhelpeR")
WD2 <- 'C:/Users/ebene/OneDrive - University of Florida/PHC6099_programming_basics/final_project/EMGhelpeR'
setwd(WD2)
#usethis::use_rcpp()
Rcpp::compileAttributes()
devtools::check(pkg = "C:/Users/ebene/OneDrive - University of Florida/PHC6099_programming_basics/final_project/EMGhelpeR")
devtools::build()
devtools::install(build_vignettes = TRUE)
